version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: nexussentinel-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_password_here}
      POSTGRES_DB: ${DB_NAME:-nexussentinel}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-nexussentinel}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - nexussentinel-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nexussentinel-api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      sentiment_service:
        condition: service_healthy
      signal_generator:
        condition: service_healthy
      price_forecast_service:
        condition: service_started
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-your_password_here}
      - DB_NAME=${DB_NAME:-nexussentinel}
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-your_password_here}@db:5432/${DB_NAME:-nexussentinel}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs
      - ./app:/app/app  # For development only, remove in production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - nexussentinel-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # pgAdmin (optional, for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: nexussentinel-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - nexussentinel-network
    profiles:
      - dev  # Only start in development mode

  # -------------------------------
  # Infrastructure & ML Services
  # -------------------------------

  # Redis cache (shared by ML micro-services)
  redis:
    image: redis:7-alpine
    container_name: nexussentinel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nexussentinel-network

  # FinBERT Sentiment Micro-service
  sentiment_service:
    build:
      context: ./ml_services/sentiment_service
    container_name: nexussentinel-sentiment
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
    ports:
      - "8000:8000"
    networks:
      - nexussentinel-network

  # LLaMA-3 Sentiment Micro-service (GPU optional)
  llama3_sentiment_service:
    build:
      context: ./ml_services/llama3_sentiment_service
    container_name: nexussentinel-llama3-sentiment
    restart: unless-stopped
    depends_on:
      - redis
    ports:
      - "8001:8001"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - nexussentinel-network

  # LightGBM Trading-Signal Micro-service
  signal_generator:
    build:
      context: ./ml_services/signal_generator
    container_name: nexussentinel-signal-generator
    restart: unless-stopped
    depends_on:
      - sentiment_service
    ports:
      - "8002:8002"
    networks:
      - nexussentinel-network

  # Temporal Fusion Transformer Forecast Service
  price_forecast_service:
    build:
      context: ./ml_services/price_forecast_service
    container_name: nexussentinel-price-forecast
    restart: unless-stopped
    ports:
      - "8003:8003"
    networks:
      - nexussentinel-network

  # WebSocket Signal Server
  websocket_signal_server:
    build:
      context: ./ml_services/websocket_signal_server
    container_name: nexussentinel-websocket
    restart: unless-stopped
    depends_on:
      - sentiment_service
      - signal_generator
    ports:
      - "8004:8004"
    networks:
      - nexussentinel-network

  # ZeroMQ Publisher (demo data stream)
  zmq_publisher:
    build:
      context: ./ml_services/infra_redis_zmq
    container_name: nexussentinel-zmq-publisher
    restart: unless-stopped
    command: publisher.py
    ports:
      - "5556:5556"
    networks:
      - nexussentinel-network

  # ZeroMQ Subscriber (example consumer)
  zmq_subscriber:
    build:
      context: ./ml_services/infra_redis_zmq
    container_name: nexussentinel-zmq-subscriber
    restart: unless-stopped
    command: subscriber.py
    depends_on:
      - zmq_publisher
    networks:
      - nexussentinel-network

volumes:
  postgres_data:
    name: nexussentinel-postgres-data
  pgadmin_data:
    name: nexussentinel-pgadmin-data
  redis_data:
    name: nexussentinel-redis-data

networks:
  nexussentinel-network:
    name: nexussentinel-network
    driver: bridge
